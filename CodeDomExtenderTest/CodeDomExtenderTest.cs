using System.Collections.Generic;
using System.IO;
using System.Linq;
using CodeDomExtender;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace CodeDomExtenderTest
{
    /// <summary>
    ///This is a test class for CLINQExtenderTest and is intended
    ///to contain all CodeDomExtenderExtenderTest Unit Tests
    ///</summary>
    [TestClass]
    public class CodeDomExtenderTest
    {
        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext { get; set; }

        /// <summary>
        ///A test for GetMethod
        ///</summary>
        [TestMethod]
        public void CodeDomExtenderTest_TestCodeGeneration()
        {
            var c = new CodeDom();
            c.AddNamespace("Samples").Imports("System")
                .AddClass(
                  c.Class("TestClass")
                    .AddMethod(c.Method("PrintTest", "Console.WriteLine(\"hello world\");")));

            string s = c.GenerateCode();
            System.Diagnostics.Trace.WriteLine(s);

            string expectedResult = 
"//------------------------------------------------------------------------------\r\n" +
"// <auto-generated>\r\n" +
"//     This code was generated by a tool.\r\n" +
"//     Runtime Version:4.0.30319.36366\r\n" +
"//\r\n" +
"//     Changes to this file may cause incorrect behavior and will be lost if\r\n" +
"//     the code is regenerated.\r\n" +
"// </auto-generated>\r\n" +
"//------------------------------------------------------------------------------\r\n" +
"\r\n" +
"namespace Samples {\r\n" +
"    using System;\r\n" +
"    \r\n" +
"    \r\n" +
"    public class TestClass {\r\n" +
"        \r\n" +
"public static void PrintTest() { Console.WriteLine(\"hello world\"); } \r\n" +
"    }\r\n" +
"}\r\n";

            Assert.AreEqual(s, expectedResult);
        }

        [TestMethod]
        public void CodeDomExtenderTest_TestCompileAssemblyToFile()
        {
            var c = new CodeDom();
            c.AddNamespace("Sample")
                .AddClass(c.Class("Test"));

            string strPath = Path.GetRandomFileName();
            c.Compile(strPath);

            Assert.IsTrue(File.Exists(strPath));
        }

        [TestMethod]
        public void CodeDomExtenderTest_TestCallMethodWithReturnValue()
        {
            var c = new CodeDom();
            c.AddNamespace("Samples").Imports("System")
                .AddClass(
                  c.Class("TestClass")
                    .AddMethod(c.Method("Print", "Console.WriteLine(\"Hello World\");"))
                    .AddMethod(c.Method("int", "AddNumbers", "int a, int b", "return a + b;")));

            var code = c.Compile(); // Assembly

            var methodPrint = code.GetType("Samples.TestClass").GetMethod("Print");
            methodPrint.Invoke();

            var methodAddNumbers = code.GetType("Samples.TestClass").GetMethod("AddNumbers");
            int retVal = Converter.To<int>(methodAddNumbers.Invoke(2, 3), 0);

            Assert.AreEqual(5, retVal);
        }

        [TestMethod]
        public void CodeDomExtenderTest_TestGeneratedLINQ()
        {
            var c = new CodeDom();
            c.AddReference(@"System.Core.dll")
                .AddNamespace("Samples")
                .Imports("System.Collections.Generic")
                .Imports("System.Linq")
                .AddClass(
                  c.Class("TestClass")
                    .AddMethod(c.Method("IEnumerable<string>", "FilterCollection", "IEnumerable<string> items", "return from item in items where item.StartsWith(\"a\") select item; ")));

            var items = new List<string>() { "apple", "banana", "ananas", "mango" };

            var testVal = from item in items where item.StartsWith("a") select item;

            System.Diagnostics.Trace.WriteLine(c.GenerateCode());

            var method = c.Compile().GetType("Samples.TestClass").GetMethod("FilterCollection");

            IEnumerable<string> retVal = (IEnumerable<string>)method.Invoke(items);

            Assert.AreEqual(testVal.ToArray().Length, retVal.ToArray().Length);

            var results = retVal.Except(testVal);
            Assert.AreEqual(0, results.ToArray().Length);
        }
    }
}
